"""
    1. –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏ –∏–ª–∏ —Ä–∞—Å—Å—á—ë—Ç–æ–º
    2.
    3.

"""

"""
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–ª–æ–≤–∞—Ä—è
pupil = {
    "–§–∞–º–∏–ª–∏—è –ò–º—è":{
        –î–î –º–µ—Å:{
            "achievements": ["–∞—á–∏–≤–∫–∞ 1", "–∞—á–∏–≤–∫–∞ 2"],
            "bonus": 0,
            "extra": 0,
            "reprimands": 0,
            "notes": "–∑–∞–º–µ—Ç–∫–∞ –æ–± —É—á–µ–Ω–∏–∫–µ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å"
        }
    }
}
"""

from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
import json

# —Å–ø–∏–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
achievements_list = ["–ü–æ—Å–µ—â–µ–Ω–∏–µ",
                     "–ü—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å",
                     "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                     "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
                     "–ü–æ–º–æ—â—å –Ω—É–∂–¥–∞—é—â–∏–º—Å—è"]

bonus_price = 5  # —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –±–æ–Ω—É—Å—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
extra_price = 5  # —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
# "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
# "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",

groups_list = [
    "–°–† 17-00 –í–ü",
    "–°–† 19-00 –ì–î",
    "–ß–¢ 9-30 –í–ü",
    "–ü–¢ 17-20 –ì–î",
    "–ü–¢ 19-00 –ü–°2",
    "–°–ë 10-30 –í–ü",
    "–°–ë 12-30 –ì–î",
    "–°–ë 14-10 –ü–°1",
    "–°–ë 16-00 –ö–ì",
    "–°–ë 17-40 –°–°",
    "–í–° 10-30 –ì–î",
    "–í–° 12-30 –ö–ì",
    "–í–° 15-00 –°–°",
    "–í–° 17-00 –ì–î",
    "–í–° 19-00 –ü–°2"
]

dates = {
    "–°–†": None,
    "–ß–¢": None,
    "–ü–¢": None,
    "–°–ë": None,
    "–í–°": None
}

# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–∞—Ç –ø–æ –¥–Ω—è–º
start_day = QDate(2021, 1, 27)
for d in dates.keys():
    days = []
    _day = start_day
    while _day.month() < 6:
        days.append(_day.toString("dd MMM"))
        _day = _day.addDays(7)
    dates[d] = days
    start_day = start_day.addDays(1)


# –æ—Ç—Å—Ç—É–ø –≤–Ω–∞—á–∞–ª–µ —è—á–µ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
class PaddingDelegate(QStyledItemDelegate):
    def __init__(self, padding=1, parent=None):
        super(PaddingDelegate, self).__init__(parent)
        self._padding = ' ' * max(1, padding)

    def displayText(self, text, locale):
        return self._padding + text

    def createEditor(self, parent, option, index):
        editor = super().createEditor(parent, option, index)
        margins = editor.textMargins()
        padding = editor.fontMetrics().width(self._padding) + 1
        margins.setLeft(margins.left() + padding)
        editor.setTextMargins(margins)
        return editor

class LineEdit(QLineEdit):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        le_style = """
        QLineEdit{
            background-color: #FFF;
            color: #833AE0;
            font-size: 15pt;
            border-radius: 15px;
            padding: 10px;
            }
            
        """
        self.setStyleSheet(le_style)

class PushButton(QPushButton):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        button_style = """
        QPushButton{
            background-color: #833AE0;
            color: #FFFFFF;
            font-size: 15pt;
            border-radius: 15px;
            padding: 10px;
            }
        QPushButton:pressed
        {
          border-left: 3px solid #2B2235;
          border-top: 3px solid #2B2235;
        }
        """
        self.setStyleSheet(button_style)


class TableWidget(QTableWidget):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.setFont(QFont(None, 15))
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–∞ –≤–Ω–∞—á–∞–ª–µ —è—á–µ–π–∫–∏
        self.delegate = PaddingDelegate()
        self.setItemDelegate(self.delegate)

    def contextMenuEvent(self, event):
        context_menu = QMenu(self)
        del_row_menu = context_menu.addAction("–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É")
        action = context_menu.exec_(self.mapToGlobal(event.pos()))

        if action == del_row_menu:
            current_row_index = self.currentRow()
            del main_win.pupil[self.item(current_row_index, 0).text()]
            self.removeRow(current_row_index)
            self.setRowCount(10)

    # def mousePressEvent(self, event):
    #     table = event.button()
    #     if table == Qt.RightButton:
    #         print("Right button click!")
    #     elif table == Qt.LeftButton:
    #         print("Left button click!")
    #     return QTableWidget.mousePressEvent(self, event)


class MainWidget(QWidget):
    def __init__(self):
        super().__init__()

        # –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.groups_btn_list = []  # —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã —Å–µ–≥–æ–¥–Ω—è
        self.achievement_chb_list = []  # —Å–ø–∏—Å–æ–∫ —á–µ–∫–±–æ–∫—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

        # –≤–∏–¥–∂–µ—Ç—ã
        self.groups_list_layout = QHBoxLayout()
        self.prev_btn = PushButton("‚óÄ")
        self.next_btn = PushButton("‚ñ∂")
        self.group_name_lbl = QLabel("–ì—Ä—É–ø–ø–∞")
        self.group_name_lbl.setAlignment(Qt.AlignCenter)
        self.table = TableWidget(9, 1)
        self.add_table_col_btn = PushButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü")
        self.achievements_gb = QGroupBox("–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
        self.achievements_gb.setStyleSheet("background-color:#D9BBFF; color: #2B2235")
        self.bonus_ach = LineEdit()
        self.bonus_ach.setFixedWidth(70)
        self.bonus_ach.setAlignment(Qt.AlignCenter)
        self.bonus_ach.setReadOnly(True)
        self.bonus_up_btn = PushButton("‚ñ≤")
        self.bonus_up_btn.setFixedWidth(70)
        self.bonus_down_btn = PushButton("‚ñº")
        self.bonus_down_btn.setFixedWidth(70)
        self.extra_ach = LineEdit()
        self.extra_ach.setAlignment(Qt.AlignCenter)
        self.extra_ach.setReadOnly(True)
        self.extra_ach.setFixedWidth(70)
        self.extra_up_btn = PushButton("‚ñ≤")
        self.extra_up_btn.setFixedWidth(70)
        self.extra_down_btn = PushButton("‚ñº")
        self.extra_down_btn.setFixedWidth(70)
        self.reprimands_amount = QLineEdit()
        self.reprimands_amount.setReadOnly(True)
        self.reprimands_amount.setText("0")
        self.reprimands_amount.setAlignment(Qt.AlignCenter)
        self.inc_repr_btn = PushButton("‚ñ≤")
        self.inc_repr_btn.setFixedWidth(70)
        self.dec_repr_btn = PushButton("‚ñº")
        self.dec_repr_btn.setFixedWidth(70)
        self.save_btn = PushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.note_field = QTextEdit()
        self.groups_list_btn_gb = QGroupBox("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Å–µ–≥–æ–¥–Ω—è")
        self.calendar = QCalendarWidget()
        self.calendar.setFont(QFont("Times", 12))

        # —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞: –§–ò : {–¥–∞—Ç–∞ : [—Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –∑–∞–Ω—è—Ç–∏–µ]}
        self.pupil = dict()
        self.resize(1366, 768)
        self.choose_day()
        self.widgets_location()
        self.connects()
        self.visualisation()
        self.setWindowTitle("‚ú®–ê—Å—Ç—Ä–æ–∫–æ–π–Ω—ãüí∞")
        self.showMaximized()

    def visualisation(self):

        # self.setFont(QFont("Times", 12))
        win_style = """
            background-color: #FFEC99;
            color: #2B2235;
        """
        self.setStyleSheet(win_style)
        table_style = """
                    QTableWidget:item {font-size: 12px}
                """
        header_style = """::section{background-color:#D9BBFF;
                                    font-weight: bold;}"""
        self.table.horizontalHeader().setStyleSheet(header_style)
        self.table.verticalHeader().setStyleSheet(header_style)
        # for _ in range(self.columnCount()):
        #     self.horizontalHeaderItem(_).setBackground(QColor(255, 0, 0))
        # self.setStyleSheet(table_style)

    def widgets_location(self):
        nav_layout = QHBoxLayout()
        nav_layout.addWidget(self.prev_btn)
        nav_layout.addWidget(self.group_name_lbl)
        nav_layout.addWidget(self.next_btn)

        # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ checkbox
        achievements_layout = QVBoxLayout()
        achievement_style_sheet = '''
                QCheckBox {
                    spacing: 20px;
                    font-size:15pt;     
                }

                QCheckBox::indicator {
                    width:  40px;
                    height: 40px;
                    border-radius: 5px;
                }
                QCheckBox::indicator:unchecked
                {
                    background-color: #FFF;
                }
                QCheckBox::indicator:checked
                {
                    background-color: #833AE0;
                }
                
                
                '''
        chb_names = [
            "üòé –ü–æ—Å–µ—â–µ–Ω–∏–µ",
            "‚è∞ –ü—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å",
            "‚úã –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
            "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
            "ü§ù –ü–æ–º–æ—â—å –Ω—É–∂–¥–∞—é—â–∏–º—Å—è",
            "‚≠ê –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
            "üè† –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"]
        for _ in range(len(chb_names)):
            chb = QCheckBox(chb_names[_])
            self.achievement_chb_list.append(chb)

            if _ == len(chb_names) - 2:
                row1 = QHBoxLayout()
                row1.addWidget(self.achievement_chb_list[_])
                # hs = QSpacerItem(20, 20, QSizePolicy.Ignored, QSizePolicy.Minimum)

                # row1.addItem(hs)
                row1.addWidget(self.bonus_ach)
                row1.addWidget(self.bonus_up_btn)
                row1.addWidget(self.bonus_down_btn)
                achievements_layout.addLayout(row1)
            elif _ == len(chb_names) - 1:
                row2 = QHBoxLayout()
                row2.addWidget(self.achievement_chb_list[_])
                row2.addWidget(self.extra_ach)
                row2.addWidget(self.extra_up_btn)
                row2.addWidget(self.extra_down_btn)
                achievements_layout.addLayout(row2)
            else:
                achievements_layout.addWidget(self.achievement_chb_list[_])
            chb.setStyleSheet(achievement_style_sheet)

        reprimand_layout = QHBoxLayout()
        reprimand_layout.addWidget(QLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—á–∞–Ω–∏–π:"))
        reprimand_layout.addWidget(self.reprimands_amount)
        reprimand_layout.addWidget(self.inc_repr_btn)
        reprimand_layout.addWidget(self.dec_repr_btn)
        achievements_layout.addLayout(reprimand_layout)
        self.achievements_gb.setLayout(achievements_layout)

        table_layout = QVBoxLayout()
        table_layout.addLayout(nav_layout)
        table_layout.addWidget(self.table)
        table_layout.addWidget(self.save_btn)

        top_layout = QHBoxLayout()
        top_layout.addLayout(table_layout, stretch=2)
        top_layout.addWidget(self.achievements_gb, stretch=1)

        comment_layout = QVBoxLayout()
        comment_layout.addWidget(self.note_field)
        comment_layout.addWidget(self.groups_list_btn_gb)

        bottom_layout = QHBoxLayout()
        bottom_layout.addLayout(comment_layout, stretch=2)
        bottom_layout.addWidget(self.calendar, stretch=1)

        main_layout = QVBoxLayout()
        main_layout.addLayout(top_layout)
        main_layout.addLayout(bottom_layout)
        self.setLayout(main_layout)

    def reset_flags(self):
        # —Å–±—Ä–æ—Å —á–µ–∫–±–æ–∫—Å–æ–≤
        for chb in self.achievement_chb_list:
            chb.setCheckState(Qt.Unchecked)

        # —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –±–æ–Ω—Å—É–Ω—ã—Ö –∏ –¥–æ–ø. –∑–∞–¥–∞–Ω–∏–π
        self.bonus_ach.setText("0")
        self.extra_ach.setText("0")

        # –æ–±–Ω—É–ª–µ–Ω–∏–µ –∑–∞–º–µ—á–∞–Ω–∏–π
        self.reprimands_amount.setText("0")

        # –æ—á–∏—Å—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        self.note_field.clear()

        self.visualisation()

    # –≤—ã–±–æ—Ä –¥–Ω—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    def choose_day(self):
        self.reset_flags()
        try:
            self.note_field.clear()
            current_day = self.calendar.selectedDate()
            weekday_name = current_day.shortDayName(current_day.dayOfWeek())

            groups_list_today = []  # —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –°–ï–ì–û–î–ù–Ø
            for group_name in groups_list:
                if weekday_name.lower() in group_name.lower():
                    groups_list_today.append(group_name)
            self.group_name_lbl.setText(groups_list_today[0])

            # –æ—á–∏—Å—Ç–∫–∞ –º–∞–∫–µ—Ç–∞ –æ—Ç –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –≥—Ä—É–ø–ø
            # while self.groups_list_layout.count():
            #     child = self.groups_list_layout.takeAt(0)
            #     if child.widget():
            #         child.widget().deleteLater()
            for i in reversed(range(self.groups_list_layout.count())):
                self.groups_list_layout.itemAt(i).widget().setParent(None)

            self.groups_btn_list.clear()
            # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
            for i in range(len(groups_list_today)):
                r_btn = QRadioButton(groups_list_today[i])
                self.groups_btn_list.append(r_btn)
                r_btn.setStyleSheet('QRadioButton{font: 12pt None;} QRadioButton::indicator { width: 40px; height: 40px;};')
                self.groups_list_layout.addWidget(self.groups_btn_list[i])
            self.groups_btn_list[0].setChecked(1)
            self.groups_list_btn_gb.setLayout(self.groups_list_layout)
            self.button_click()
        except:
            print("–ù–µ —Å—Ä–∞–±—Ç–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—è choose_day")
        else:
            # —Ç.–∫. –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤—Å—è–∫–∏–π —Ä–∞–∑ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–Ω—è, —Ç–æ –∏ –∫–ª–∏–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω—É–∂–Ω–æ –≤—Å–µ–≥–¥—è –ø–æ –Ω–æ–≤–æ–π
            for self.b in self.groups_btn_list:
                self.b.clicked.connect(self.button_click)
        finally:
            self.reset_flags()

    # –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã (–∫–ª–∏–∫ –ø–æ radiobutton)
    def button_click(self):
        for b in self.groups_btn_list:
            if b.isChecked():
                self.group_name_lbl.setText(b.text())
                self.open_table()

    def pupils_load(self):
        # group = {None: []}
        # filename = str(self.group_name_lbl.text()) + ".json"
        with open("data.json", 'r', encoding="utf-8") as file:
            group = json.load(file)
        row = 0
        for p in group[str(self.group_name_lbl.text())]:
            if self.table.item(row, 0) is not None:
                return
            else:
                self.table.setItem(row, 0, QTableWidgetItem(p))
            row += 1

    def save_table_to_file(self):
        try:
            if len(self.pupil) > 0:
                filename = str(self.group_name_lbl.text()) + ".json"
                with open(filename, 'w') as file:
                    json.dump(self.pupil, file, indent=4, sort_keys=True, ensure_ascii=False)
        except:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")

    def open_file(self):
        try:
            self.pupil.clear()
            filename = str(self.group_name_lbl.text()) + ".json"
            file = open(filename, 'r')
        except:
            pass
        else:
            self.pupil = json.load(file)
        finally:
            file.close()

    def add_col(self):
        self.table.setColumnCount(int(self.table.columnCount()) + 1)

        # –ø–æ–¥–≥–æ–Ω —à–∏—Ä–∏–Ω—ã –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        for _ in range(1, self.table.columnCount()):
            self.table.horizontalHeader().setSectionResizeMode(_, QHeaderView.ResizeToContents)

    def open_table(self):
        # –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–µ—Ç—Å—è 1 —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —É—á–µ–Ω–∏–∫–∞
        try:
            self.table.clear()
            self.table.setColumnCount(1)
            self.table.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)
            for d in dates.keys():
                if self.calendar.selectedDate().shortDayName(
                        self.calendar.selectedDate().dayOfWeek()).lower() == d.lower():
                    for i in dates[d]:
                        self.add_col()
                    break
            group_dates = [str(_) for _ in dates[d]]
            group_dates.insert(0, "–§–∞–º–∏–ª–∏—è –ò–º—è")
            group_dates.append("–ò–¢–û–ì–û")
            self.add_col()
            self.table.setHorizontalHeaderLabels(group_dates)
        except:
            print("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        else:
            try:
                self.open_file()
                row = 0
                for pup in self.pupil:
                    self.table.setItem(row, 0, QTableWidgetItem(pup))
                    sum = 0
                    for col in range(1, self.table.columnCount() - 1):
                        if self.table.horizontalHeaderItem(col).text() in self.pupil[pup]:
                            value = self.pupil[pup][str(self.table.horizontalHeaderItem(col).text())]["achievements"]
                            bon = self.pupil[pup][str(self.table.horizontalHeaderItem(col).text())]["bonus"]
                            ex = self.pupil[pup][str(self.table.horizontalHeaderItem(col).text())]["extra"]
                            rep = self.pupil[pup][str(self.table.horizontalHeaderItem(col).text())]["reprimands"]

                            curr_sum = len(
                                value) * 10 + bon * 5 + ex * 5 - rep * 10  # –ø–æ–¥—Å—á—ë—Ç —Å—É–º–º—ã –∞—Å—Ç—Ä–æ–∫–æ–π–Ω–æ–≤ –∏–∑ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
                            sum += curr_sum  # –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
                            self.table.setItem(row, col, QTableWidgetItem(str(curr_sum)))
                    self.table.setItem(row, col + 1, QTableWidgetItem(str(sum)))  # –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ–±—â–µ–π —Å—É–º–º—ã
                    row += 1
            except:
                print("–û–ø—è—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –Ω–æ —É–∂–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞")
            finally:
                self.pupils_load()

    def cell_fill(self):
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π —á–µ–∫–±–æ–∫—Å
        if self.table.currentColumn() != 0:
            try:
                points, b, e = 0, 0, 0
                key = self.table.item(self.table.currentRow(), 0).text()  # —Ñ–∞–º–∏–ª–∏—è
                value = self.table.horizontalHeaderItem(self.table.currentColumn()).text()  # –¥–∞—Ç–∞
                _ach_lst = []
                for chb in self.achievement_chb_list:
                    if chb.checkState():
                        if chb.text().find("–ü–æ—Å–µ—â–µ–Ω–∏–µ") != -1:
                            points += 0.5
                        elif chb.text().find("–ü—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å") != -1:
                            points += 1.5
                        elif chb.text().find("–±–æ–Ω—É—Å") != -1:
                            b = int(self.bonus_ach.text()) * bonus_price
                        elif chb.text().find("–¥–æ–ø–æ–ª") != -1:
                            e = int(self.extra_ach.text()) * extra_price
                        else:
                            points += 1

                        if chb.text().find("–±–æ–Ω—É—Å") == -1 and chb.text().find("–¥–æ–ø–æ–ª") == -1:
                            _ach_lst.append(chb.text()[2:])

                if key not in self.pupil:
                    self.pupil[key] = {value: {}}

                self.pupil[key][value] = {"achievements": _ach_lst,
                                          "bonus": int(self.bonus_ach.text()),
                                          "extra": int(self.extra_ach.text()),
                                          "reprimands": int(self.reprimands_amount.text()),
                                          "notes": self.note_field.toPlainText()}

                self.table.setItem(self.table.currentRow(), self.table.currentColumn(),
                                   QTableWidgetItem(str(int(points * 10 + b + e))))
            except:
                print("–ù–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—è cell_fill")
            finally:
                self.calculate_sum()

    def cell_select(self):
        self.reset_flags()
        try:
            t = self.table
            if t.item(t.currentRow(), t.currentColumn()) is not None:
                key = self.table.item(self.table.currentRow(), 0).text()
                value = self.table.horizontalHeaderItem(self.table.currentColumn()).text()
                for chb in self.achievement_chb_list:
                    if chb.text()[2:] in self.pupil[key][value]["achievements"]:
                        chb.setCheckState(Qt.Checked)
                    elif chb.text()[2:] == "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π" and self.pupil[key][value]["bonus"] != 0:
                        chb.setCheckState(Qt.Checked)
                    elif chb.text()[2:] == "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π" and self.pupil[key][value]["extra"] != 0:
                        chb.setCheckState(Qt.Checked)

                self.bonus_ach.setText(str(self.pupil[key][value]["bonus"]))
                self.extra_ach.setText(str(self.pupil[key][value]["extra"]))
                self.reprimands_amount.setText(str(self.pupil[key][value]["reprimands"]))
                self.note_field.setText(self.pupil[key][value]["notes"])
            else:
                self.reset_flags()
        except:
            print("–ù–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—è cell_select")

    # –∑–∞–∫–æ–Ω—á–∏–ª +- —Ç—É—Ç. –ù–∞–¥–æ –∑–∞—Ç–µ—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫—É
    def pupil_fill(self):
        if self.table.currentItem():
            key = self.table.item(self.table.currentRow(), 0).text()
            value = self.table.horizontalHeaderItem(self.table.currentColumn()).text()
            for chb in self.achievement_chb_list:
                if chb.text()[2:] == "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π" and chb.checkState():
                    self.pupil[key][value]["bonus"] = int(self.bonus_ach.text())
                if chb.text()[2:] == "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π" and chb.checkState():
                    self.pupil[key][value]["extra"] = int(self.extra_ach.text())
            self.pupil[key][value]["reprimands"] = int(self.reprimands_amount.text())
            self.pupil[key][value]["notes"] = self.note_field.toPlainText()
            c = 0

    def inc_repr(self):
        count = int(self.reprimands_amount.text()) + 1
        self.reprimands_amount.setText(str(count))
        if self.table.currentItem() is not None:
            key = self.table.item(self.table.currentRow(), 0).text()
            value = self.table.horizontalHeaderItem(self.table.currentColumn()).text()
            current_value = len(self.pupil[key][value]["achievements"]) * 10
            current_value -= count * 10
            self.table.currentItem().setText(str(current_value))
        self.pupil[key][value]["reprimands"] = count
        self.calculate_sum()
        self.pupil_fill()

    def dec_repr(self):
        count = int(self.reprimands_amount.text())
        if count > 0:
            count -= 1
            self.reprimands_amount.setText(str(count))
        if self.table.currentItem() is not None:
            key = self.table.item(self.table.currentRow(), 0).text()
            value = self.table.horizontalHeaderItem(self.table.currentColumn()).text()
            current_value = len(self.pupil[key][value]["achievements"]) * 10
            current_value -= count * 10
            self.table.currentItem().setText(str(current_value))
        self.pupil[key][value]["reprimands"] = count
        self.calculate_sum()
        self.pupil_fill()

    def bonus_up(self):
        count = int(self.bonus_ach.text()) + 1
        self.bonus_ach.setText(str(count))
        for chb in self.achievement_chb_list:
            if chb.text()[2:] == "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π" and not chb.checkState():
                chb.setCheckState(True)

        self.calculate_sum()
        self.pupil_fill()
        self.cell_fill()

    def bonus_down(self):
        count = int(self.bonus_ach.text())
        if count > 0:
            count -= 1
            self.bonus_ach.setText(str(count))

        self.calculate_sum()
        self.pupil_fill()
        self.cell_fill()

    def extra_up(self):
        count = int(self.extra_ach.text()) + 1
        self.extra_ach.setText(str(count))
        for chb in self.achievement_chb_list:
            if chb.text()[2:] == "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π" and not chb.checkState():
                chb.toggle()
                # chb.setCheckState(Qt.Checked)

        self.calculate_sum()
        self.pupil_fill()
        self.cell_fill()

    def extra_down(self):
        count = int(self.extra_ach.text())
        if count > 0:
            count -= 1
            self.extra_ach.setText(str(count))

        self.calculate_sum()
        self.pupil_fill()
        self.cell_fill()

    def calculate_sum(self):
        self.table.setFocus()
        for row in range(self.table.rowCount()):
            if self.table.item(row, 0) is not None:
                total_sum = 0
                for col in range(1, self.table.columnCount() - 1):
                    if self.table.item(row, col) is not None:
                        total_sum += int(self.table.item(row, col).text())
                self.table.setItem(row, col + 1, QTableWidgetItem(str(total_sum)))  # –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ–±—â–µ–π —Å—É–º–º—ã
            else:
                return

    def test(self):
        for chb in self.achievement_chb_list:
            chb.toggle()

    def connects(self):
        self.calendar.selectionChanged.connect(self.choose_day)
        self.add_table_col_btn.clicked.connect(self.test)
        for chb in self.achievement_chb_list:
            chb.clicked.connect(self.cell_fill)
        self.bonus_up_btn.clicked.connect(self.bonus_up)
        self.bonus_down_btn.clicked.connect(self.bonus_down)
        self.extra_up_btn.clicked.connect(self.extra_up)
        self.extra_down_btn.clicked.connect(self.extra_down)
        self.table.clicked.connect(self.cell_select)
        self.save_btn.clicked.connect(self.save_table_to_file)
        self.inc_repr_btn.clicked.connect(self.inc_repr)
        self.dec_repr_btn.clicked.connect(self.dec_repr)
        self.note_field.textChanged.connect(self.pupil_fill)
        self.prev_btn.clicked.connect(self.test)


if __name__ == "__main__":
    app = QApplication([])
    main_win = MainWidget()
    app.exec_()
