"""
    1. –ó–∞–ø–∏—Å—å –∑–∞–º–µ—á–∞–Ω–∏–π –≤ —Ñ–∞–π–ª
    2. –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ –≤ –¥–≤—É–º–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —ç–ª–º–µ–Ω—Ç–∞ - –∑–∞–º–µ—á–∞–Ω–∏–π
    3. –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø—Ä–∞–≤–∏—Ç—å)
"""

from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
import json

achievements_list = ["–ü–æ—Å–µ—â–µ–Ω–∏–µ",
                     "–ü—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å",
                     "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                     "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
                     "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
                     "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
                     "–ü–æ–º–æ—â—å –Ω—É–∂–¥–∞—é—â–∏–º—Å—è"]

groups_list = [
    "–°–† 17-00 –í–ü",
    "–°–† 19-00 –ì–î",
    "–ß–¢ 9-30 –í–ü",
    "–ü–¢ 19-00 –ü–°2",
    "–°–ë 10-30 –í–ü",
    "–°–ë 12-30 –ì–î",
    "–°–ë 14-10 –ü–°1",
    "–°–ë 16-00 –ö–ì",
    "–°–ë 17-40 –°–°",
    "–í–° 10-30 –ì–î",
    "–í–° 12-30 –ö–ì",
    "–í–° 15-00 –°–°",
    "–í–° 17-00 –ì–î",
    "–í–° 19-00 –ü–°2"
]

dates = {
    "–°–†": None,
    "–ß–¢": None,
    "–ü–¢": None,
    "–°–ë": None,
    "–í–°": None
}

# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–∞—Ç –ø–æ –¥–Ω—è–º
start_day = QDate(2021, 1, 27)
for d in dates.keys():
    days = []
    _day = start_day
    while _day.month() < 6:
        days.append(_day.toString("dd MMM"))
        _day = _day.addDays(7)
    dates[d] = days
    start_day = start_day.addDays(1)


class PaddingDelegate(QStyledItemDelegate):  # –æ—Ç—Å—Ç—É–ø –≤–Ω–∞—á–∞–ª–µ —è—á–µ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    def __init__(self, padding=1, parent=None):
        super(PaddingDelegate, self).__init__(parent)
        self._padding = ' ' * max(1, padding)

    def displayText(self, text, locale):
        return self._padding + text

    def createEditor(self, parent, option, index):
        editor = super().createEditor(parent, option, index)
        margins = editor.textMargins()
        padding = editor.fontMetrics().width(self._padding) + 1
        margins.setLeft(margins.left() + padding)
        editor.setTextMargins(margins)
        return editor


class TableWidget(QTableWidget):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        table_style = """
            QTableWidget:item {font-size: 12px}
        """
        self.setStyleSheet(table_style)
        self.setFont(QFont(None, 15))
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–∞ –≤–Ω–∞—á–∞–ª–µ —è—á–µ–π–∫–∏
        self.delegate = PaddingDelegate()
        self.setItemDelegate(self.delegate)

    def contextMenuEvent(self, event):
        context_menu = QMenu(self)
        del_row_menu = context_menu.addAction("–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É")
        action = context_menu.exec_(self.mapToGlobal(event.pos()))

        if action == del_row_menu:
            current_row_index = self.currentRow()
            del main_win.pupil[self.item(current_row_index, 0).text()]
            self.removeRow(current_row_index)
            self.setRowCount(10)

    # def mousePressEvent(self, event):
    #     table = event.button()
    #     if table == Qt.RightButton:
    #         print("Right button click!")
    #     elif table == Qt.LeftButton:
    #         print("Left button click!")
    #     return QTableWidget.mousePressEvent(self, event)


class MainWidget(QWidget):
    def __init__(self):
        super().__init__()

        # –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.groups_btn_list = []  # —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã —Å–µ–≥–æ–¥–Ω—è
        self.achievement_chb_list = []  # —Å–ø–∏—Å–æ–∫ —á–µ–∫–±–æ–∫—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

        # –≤–∏–¥–∂–µ—Ç—ã
        self.groups_list_layout = QHBoxLayout()
        self.setFont(QFont("Times", 12))
        self.prev_btn = QPushButton("‚óÄ")
        self.next_btn = QPushButton("‚ñ∂")
        self.group_name_lbl = QLabel("–ì—Ä—É–ø–ø–∞")
        self.group_name_lbl.setAlignment(Qt.AlignCenter)
        self.table = TableWidget(9, 1)
        self.add_table_col_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü")
        self.achievements_gb = QGroupBox("–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
        self.reprimands_amount = QLineEdit()
        self.reprimands_amount.setReadOnly(True)
        self.reprimands_amount.setText("0")
        self.reprimands_amount.setAlignment(Qt.AlignCenter)
        self.inc_repr_btn = QPushButton("‚ñ≤")
        self.dec_repr_btn = QPushButton("‚ñº")
        self.save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.note_field = QTextEdit()
        self.groups_list_btn_gb = QGroupBox("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Å–µ–≥–æ–¥–Ω—è")
        self.calendar = QCalendarWidget()
        self.calendar.setFont(QFont("Times", 12))

        # —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞: –§–ò : {–¥–∞—Ç–∞ : [—Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –∑–∞–Ω—è—Ç–∏–µ]}
        self.pupil = dict()
        self.resize(1366, 768)
        self.choose_day()
        self.widgets_location()
        self.connects()
        self.setWindowTitle("‚ú®–ê—Å—Ç—Ä–æ–∫–æ–π–Ω—ãüí∞")
        self.showMaximized()

    def widgets_location(self):
        nav_layout = QHBoxLayout()
        nav_layout.addWidget(self.prev_btn)
        nav_layout.addWidget(self.group_name_lbl)
        nav_layout.addWidget(self.next_btn)

        # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ checkbox
        achievements_layout = QVBoxLayout()
        achievement_style_sheet = '''
                QCheckBox {
                    spacing: 20px;
                    font-size:18pt;     
                }

                QCheckBox::indicator {
                    width:  40px;
                    height: 40px;
                }
                '''
        chb_names = [
            "üòé –ü–æ—Å–µ—â–µ–Ω–∏–µ",
            "‚è∞ –ü—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å",
            "‚úã –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
            "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
            "‚≠ê –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
            "üè† –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
            "ü§ù –ü–æ–º–æ—â—å –Ω—É–∂–¥–∞—é—â–∏–º—Å—è"]
        for _ in range(len(chb_names)):
            chb = QCheckBox(chb_names[_])
            chb.setStyleSheet(achievement_style_sheet)
            self.achievement_chb_list.append(chb)
            achievements_layout.addWidget(self.achievement_chb_list[_])

        reprimand_layout = QHBoxLayout()
        reprimand_layout.addWidget(QLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—á–∞–Ω–∏–π:"))
        reprimand_layout.addWidget(self.reprimands_amount)
        reprimand_layout.addWidget(self.inc_repr_btn)
        reprimand_layout.addWidget(self.dec_repr_btn)
        achievements_layout.addLayout(reprimand_layout)
        self.achievements_gb.setLayout(achievements_layout)

        table_layout = QVBoxLayout()
        table_layout.addLayout(nav_layout)
        table_layout.addWidget(self.table)
        table_layout.addWidget(self.save_btn)

        top_layout = QHBoxLayout()
        top_layout.addLayout(table_layout, stretch=2)
        top_layout.addWidget(self.achievements_gb, stretch=1)

        comment_layout = QVBoxLayout()
        comment_layout.addWidget(self.note_field)
        comment_layout.addWidget(self.groups_list_btn_gb)

        bottom_layout = QHBoxLayout()
        bottom_layout.addLayout(comment_layout, stretch=2)
        bottom_layout.addWidget(self.calendar, stretch=1)

        main_layout = QVBoxLayout()
        main_layout.addLayout(top_layout)
        main_layout.addLayout(bottom_layout)
        self.setLayout(main_layout)

    def choose_day(self):
        try:
            current_day = self.calendar.selectedDate()
            weekday_name = current_day.shortDayName(current_day.dayOfWeek())

            groups_list_today = []  # —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –°–ï–ì–û–î–ù–Ø
            for group_name in groups_list:
                if weekday_name.lower() in group_name.lower():
                    groups_list_today.append(group_name)
            self.group_name_lbl.setText(groups_list_today[0])

            # –æ—á–∏—Å—Ç–∫–∞ –º–∞–∫–µ—Ç–∞ –æ—Ç –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –≥—Ä—É–ø–ø
            while self.groups_list_layout.count():
                child = self.groups_list_layout.takeAt(0)
                if child.widget():
                    child.widget().deleteLater()

            self.groups_btn_list.clear()
            # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
            for i in range(len(groups_list_today)):
                self.groups_btn_list.append(QRadioButton(groups_list_today[i]))
                self.groups_list_layout.addWidget(self.groups_btn_list[i])
            self.groups_btn_list[0].setChecked(1)
            self.groups_list_btn_gb.setLayout(self.groups_list_layout)
            self.button_click()
        except:
            print("–ù–µ —Å—Ä–∞–±—Ç–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—è choose_day")
        else:
            # —Ç.–∫. –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤—Å—è–∫–∏–π —Ä–∞–∑ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–Ω—è, —Ç–æ –∏ –∫–ª–∏–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω—É–∂–Ω–æ –≤—Å–µ–≥–¥—è –ø–æ –Ω–æ–≤–æ–π
            for self.b in self.groups_btn_list:
                self.b.clicked.connect(self.button_click)
        finally:
            for chb in self.achievement_chb_list:
                chb.setCheckState(0)
            self.reprimands_amount.setText("0")

    def button_click(self):
        for b in self.groups_btn_list:
            if b.isChecked():
                self.group_name_lbl.setText(b.text())
                self.open_table()

    def pupils_load(self):
        # group = {None: []}
        # filename = str(self.group_name_lbl.text()) + ".json"
        with open("data.json", 'r', encoding="utf-8") as file:
            group = json.load(file)
        row = 0
        for p in group[str(self.group_name_lbl.text())]:
            if self.table.item(row, 0) is not None:
                return
            else:
                self.table.setItem(row, 0, QTableWidgetItem(p))
            row += 1

    def save_table_to_file(self):
        try:
            if len(self.pupil) > 0:
                filename = str(self.group_name_lbl.text()) + ".json"
                with open(filename, 'w') as file:
                    json.dump(self.pupil, file, sort_keys=True, ensure_ascii=False)
        except:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")

    def open_file(self):
        try:
            self.pupil.clear()
            filename = str(self.group_name_lbl.text()) + ".json"
            file = open(filename, 'r')
        except:
            pass
        else:
            self.pupil = json.load(file)
        finally:
            file.close()

    def add_col(self):
        self.table.setColumnCount(int(self.table.columnCount()) + 1)
        self.table.setColumnWidth(self.table.columnCount() - 1, 100)

    def open_table(self):
        # –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–µ—Ç—Å—è 1 —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —É—á–µ–Ω–∏–∫–∞
        try:
            self.table.clear()
            self.table.setColumnCount(1)
            self.table.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)
            for d in dates.keys():
                if self.calendar.selectedDate().shortDayName(
                        self.calendar.selectedDate().dayOfWeek()).lower() == d.lower():
                    for i in dates[d]:
                        self.add_col()
                    break
            group_dates = [str(_) for _ in dates[d]]
            group_dates.insert(0, "–§–∞–º–∏–ª–∏—è –ò–º—è")
            group_dates.append("–ò–¢–û–ì–û")
            self.add_col()
            self.table.setHorizontalHeaderLabels(group_dates)
        except:
            print("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        else:
            try:
                self.open_file()
                row = 0
                for pup in self.pupil:
                    self.table.setItem(row, 0, QTableWidgetItem(pup))
                    sum = 0
                    for col in range(1, self.table.columnCount()-1):
                        if self.table.horizontalHeaderItem(col).text() in self.pupil[pup]:
                            value = self.pupil[pup][str(self.table.horizontalHeaderItem(col).text())]
                            self.table.setItem(row, col, QTableWidgetItem(str(len(value) * 10)))
                            sum += len(value) * 10
                    self.table.setItem(row, col+1, QTableWidgetItem(str(sum)))  # –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ–±—â–µ–π —Å—É–º–º—ã
                    row += 1
            except:
                print("–û–ø—è—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –Ω–æ —É–∂–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞")
            finally:
                self.pupils_load()

    def cell_fill(self):
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π —á–µ–∫–±–æ–∫—Å
        if self.table.currentColumn() != 0:
            try:
                points = 0
                key = self.table.item(self.table.currentRow(), 0).text()
                value = self.table.horizontalHeaderItem(self.table.currentColumn()).text()
                _ach_lst = []
                for chb in self.achievement_chb_list:
                    if chb.checkState():
                        points += 1
                        _ach_lst.append(chb.text()[2:])
                        # self.pupil[key][value].append(chb.text())
                if key not in self.pupil:
                    self.pupil[key] = {value: None}
                self.pupil[key][value] = _ach_lst
                self.table.setItem(self.table.currentRow(), self.table.currentColumn(), QTableWidgetItem(str(points * 10)))
                # self.pupil[key]["–ó–∞–º–µ—á–∞–Ω–∏—è"] = int(self.reprimands_amount.text())
            except:
                print("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —è—á–µ–π–∫—É")

    def cell_select(self):
        self.reprimands_amount.setText("0")
        for chb in self.achievement_chb_list:
            chb.setCheckState(0)
        try:
            t = self.table
            if t.item(t.currentRow(), t.currentColumn()) is not None:
                key = self.table.item(self.table.currentRow(), 0).text()
                value = self.table.horizontalHeaderItem(self.table.currentColumn()).text()
                for chb in self.achievement_chb_list:
                    print(chb.text()[2:])
                    if chb.text()[2:] in self.pupil[key][value]:
                        chb.setCheckState(1)
                    else:
                        chb.setCheckState(0)
        except:
            print("–ù–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—è cell_select")

    def inc_repr(self):
        count = int(self.reprimands_amount.text()) + 1
        self.reprimands_amount.setText(str(count))
        if self.table.currentItem() is not None:
            key = self.table.item(self.table.currentRow(), 0).text()
            value = self.table.horizontalHeaderItem(self.table.currentColumn()).text()
            current_value = len(self.pupil[key][value])*10
            current_value -= count * 10
            self.table.currentItem().setText(str(current_value))
        # self.pupil[key][value].append(count)
        self.calculate_sum()

    def dec_repr(self):
        count = int(self.reprimands_amount.text())
        if count > 0:
            count -= 1
            self.reprimands_amount.setText(str(count))
        if self.table.currentItem() is not None:
            key = self.table.item(self.table.currentRow(), 0).text()
            value = self.table.horizontalHeaderItem(self.table.currentColumn()).text()
            current_value = int(self.table.currentItem().text())
            current_value = len(self.pupil[key][value]) * 10
            current_value -= count * 10
            self.table.currentItem().setText(str(current_value))
        # self.pupil[key][value].append(count)
        self.calculate_sum()

    def calculate_sum(self):
        self.table.setFocus()
        for row in range(self.table.rowCount()):
            if self.table.item(row, 0) is not None:
                total_sum = 0
                for col in range(1, self.table.columnCount()-1):
                    if self.table.item(row, col) is not None:
                        total_sum += int(self.table.item(row, col).text())
                self.table.setItem(row, col+1, QTableWidgetItem(str(total_sum)))  # –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ–±—â–µ–π —Å—É–º–º—ã
            else:
                return

    def test(self):
        pass

    def connects(self):
        self.calendar.selectionChanged.connect(self.choose_day)
        self.add_table_col_btn.clicked.connect(self.test)
        for chb in self.achievement_chb_list:
            chb.clicked.connect(self.cell_fill)
        self.table.clicked.connect(self.cell_select)
        self.save_btn.clicked.connect(self.save_table_to_file)
        self.inc_repr_btn.clicked.connect(self.inc_repr)
        self.dec_repr_btn.clicked.connect(self.dec_repr)


if __name__ == "__main__":
    app = QApplication([])
    main_win = MainWidget()
    app.exec_()
